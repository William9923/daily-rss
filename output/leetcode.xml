<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
  <channel>
    <title>LeetCode Daily Challenge</title>
    <link>https://william9923.github.io/daily-rss/output/leetcode.xml</link>
    <description>Daily coding challenge from LeetCode</description>
    <atom:link href="https://william9923.github.io/daily-rss/output/leetcode.xml" rel="self"/>
    <docs>http://www.rssboard.org/rss-specification</docs>
    <generator>python-feedgen</generator>
    <language>en</language>
    <lastBuildDate>Wed, 14 May 2025 02:50:06 +0000</lastBuildDate>
    <item>
      <title>Total Characters in String After Transformations II</title>
      <link>https://leetcode.com/problems/total-characters-in-string-after-transformations-ii/</link>
      <description>&lt;p&gt;You are given a string &lt;code&gt;s&lt;/code&gt; consisting of lowercase English letters, an integer &lt;code&gt;t&lt;/code&gt; representing the number of &lt;strong&gt;transformations&lt;/strong&gt; to perform, and an array &lt;code&gt;nums&lt;/code&gt; of size 26. In one &lt;strong&gt;transformation&lt;/strong&gt;, every character in &lt;code&gt;s&lt;/code&gt; is replaced according to the following rules:&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;Replace &lt;code&gt;s[i]&lt;/code&gt; with the &lt;strong&gt;next&lt;/strong&gt; &lt;code&gt;nums[s[i] - &amp;#39;a&amp;#39;]&lt;/code&gt; consecutive characters in the alphabet. For example, if &lt;code&gt;s[i] = &amp;#39;a&amp;#39;&lt;/code&gt; and &lt;code&gt;nums[0] = 3&lt;/code&gt;, the character &lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; transforms into the next 3 consecutive characters ahead of it, which results in &lt;code&gt;&amp;quot;bcd&amp;quot;&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;The transformation &lt;strong&gt;wraps&lt;/strong&gt; around the alphabet if it exceeds &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt;. For example, if &lt;code&gt;s[i] = &amp;#39;y&amp;#39;&lt;/code&gt; and &lt;code&gt;nums[24] = 3&lt;/code&gt;, the character &lt;code&gt;&amp;#39;y&amp;#39;&lt;/code&gt; transforms into the next 3 consecutive characters ahead of it, which results in &lt;code&gt;&amp;quot;zab&amp;quot;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Return the length of the resulting string after &lt;strong&gt;exactly&lt;/strong&gt; &lt;code&gt;t&lt;/code&gt; transformations.&lt;/p&gt;

&lt;p&gt;Since the answer may be very large, return it &lt;strong&gt;modulo&lt;/strong&gt; &lt;code&gt;10&lt;sup&gt;9&lt;/sup&gt; + 7&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong class="example"&gt;Example 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="example-block"&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;span class="example-io"&gt;s = &amp;quot;abcyy&amp;quot;, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;span class="example-io"&gt;7&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;p&gt;&lt;strong&gt;First Transformation (t = 1):&lt;/strong&gt;&lt;/p&gt;

	&lt;ul&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[0] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;c&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[1] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;c&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;d&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[2] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;y&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[24] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;y&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[24] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;String after the first transformation: &lt;code&gt;&amp;quot;bcdzz&amp;quot;&lt;/code&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;p&gt;&lt;strong&gt;Second Transformation (t = 2):&lt;/strong&gt;&lt;/p&gt;

	&lt;ul&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;c&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[1] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;c&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;d&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[2] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;d&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;e&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[3] == 1&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;ab&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[25] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;ab&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[25] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;String after the second transformation: &lt;code&gt;&amp;quot;cdeabab&amp;quot;&lt;/code&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;p&gt;&lt;strong&gt;Final Length of the string:&lt;/strong&gt; The string is &lt;code&gt;&amp;quot;cdeabab&amp;quot;&lt;/code&gt;, which has 7 characters.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong class="example"&gt;Example 2:&lt;/strong&gt;&lt;/p&gt;

&lt;div class="example-block"&gt;
&lt;p&gt;&lt;strong&gt;Input:&lt;/strong&gt; &lt;span class="example-io"&gt;s = &amp;quot;azbk&amp;quot;, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt; &lt;span class="example-io"&gt;8&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;
	&lt;p&gt;&lt;strong&gt;First Transformation (t = 1):&lt;/strong&gt;&lt;/p&gt;

	&lt;ul&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;a&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;bc&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[0] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;z&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;ab&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[25] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;b&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;cd&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[1] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;&lt;code&gt;&amp;#39;k&amp;#39;&lt;/code&gt; becomes &lt;code&gt;&amp;#39;lm&amp;#39;&lt;/code&gt; as &lt;code&gt;nums[10] == 2&lt;/code&gt;&lt;/li&gt;
		&lt;li&gt;String after the first transformation: &lt;code&gt;&amp;quot;bcabcdlm&amp;quot;&lt;/code&gt;&lt;/li&gt;
	&lt;/ul&gt;
	&lt;/li&gt;
	&lt;li&gt;
	&lt;p&gt;&lt;strong&gt;Final Length of the string:&lt;/strong&gt; The string is &lt;code&gt;&amp;quot;bcabcdlm&amp;quot;&lt;/code&gt;, which has 8 characters.&lt;/p&gt;
	&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Constraints:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;code&gt;1 &amp;lt;= s.length &amp;lt;= 10&lt;sup&gt;5&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;s&lt;/code&gt; consists only of lowercase English letters.&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;1 &amp;lt;= t &amp;lt;= 10&lt;sup&gt;9&lt;/sup&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;font face="monospace"&gt;nums.length == 26&lt;/font&gt;&lt;/code&gt;&lt;/li&gt;
	&lt;li&gt;&lt;code&gt;&lt;font face="monospace"&gt;1 &amp;lt;= nums[i] &amp;lt;= 25&lt;/font&gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      <content:encoded><![CDATA[<p>You are given a string <code>s</code> consisting of lowercase English letters, an integer <code>t</code> representing the number of <strong>transformations</strong> to perform, and an array <code>nums</code> of size 26. In one <strong>transformation</strong>, every character in <code>s</code> is replaced according to the following rules:</p>

<ul>
	<li>Replace <code>s[i]</code> with the <strong>next</strong> <code>nums[s[i] - &#39;a&#39;]</code> consecutive characters in the alphabet. For example, if <code>s[i] = &#39;a&#39;</code> and <code>nums[0] = 3</code>, the character <code>&#39;a&#39;</code> transforms into the next 3 consecutive characters ahead of it, which results in <code>&quot;bcd&quot;</code>.</li>
	<li>The transformation <strong>wraps</strong> around the alphabet if it exceeds <code>&#39;z&#39;</code>. For example, if <code>s[i] = &#39;y&#39;</code> and <code>nums[24] = 3</code>, the character <code>&#39;y&#39;</code> transforms into the next 3 consecutive characters ahead of it, which results in <code>&quot;zab&quot;</code>.</li>
</ul>

<p>Return the length of the resulting string after <strong>exactly</strong> <code>t</code> transformations.</p>

<p>Since the answer may be very large, return it <strong>modulo</strong> <code>10<sup>9</sup> + 7</code>.</p>

<p>&nbsp;</p>
<p><strong class="example">Example 1:</strong></p>

<div class="example-block">
<p><strong>Input:</strong> <span class="example-io">s = &quot;abcyy&quot;, t = 2, nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2]</span></p>

<p><strong>Output:</strong> <span class="example-io">7</span></p>

<p><strong>Explanation:</strong></p>

<ul>
	<li>
	<p><strong>First Transformation (t = 1):</strong></p>

	<ul>
		<li><code>&#39;a&#39;</code> becomes <code>&#39;b&#39;</code> as <code>nums[0] == 1</code></li>
		<li><code>&#39;b&#39;</code> becomes <code>&#39;c&#39;</code> as <code>nums[1] == 1</code></li>
		<li><code>&#39;c&#39;</code> becomes <code>&#39;d&#39;</code> as <code>nums[2] == 1</code></li>
		<li><code>&#39;y&#39;</code> becomes <code>&#39;z&#39;</code> as <code>nums[24] == 1</code></li>
		<li><code>&#39;y&#39;</code> becomes <code>&#39;z&#39;</code> as <code>nums[24] == 1</code></li>
		<li>String after the first transformation: <code>&quot;bcdzz&quot;</code></li>
	</ul>
	</li>
	<li>
	<p><strong>Second Transformation (t = 2):</strong></p>

	<ul>
		<li><code>&#39;b&#39;</code> becomes <code>&#39;c&#39;</code> as <code>nums[1] == 1</code></li>
		<li><code>&#39;c&#39;</code> becomes <code>&#39;d&#39;</code> as <code>nums[2] == 1</code></li>
		<li><code>&#39;d&#39;</code> becomes <code>&#39;e&#39;</code> as <code>nums[3] == 1</code></li>
		<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>
		<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>
		<li>String after the second transformation: <code>&quot;cdeabab&quot;</code></li>
	</ul>
	</li>
	<li>
	<p><strong>Final Length of the string:</strong> The string is <code>&quot;cdeabab&quot;</code>, which has 7 characters.</p>
	</li>
</ul>
</div>

<p><strong class="example">Example 2:</strong></p>

<div class="example-block">
<p><strong>Input:</strong> <span class="example-io">s = &quot;azbk&quot;, t = 1, nums = [2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2]</span></p>

<p><strong>Output:</strong> <span class="example-io">8</span></p>

<p><strong>Explanation:</strong></p>

<ul>
	<li>
	<p><strong>First Transformation (t = 1):</strong></p>

	<ul>
		<li><code>&#39;a&#39;</code> becomes <code>&#39;bc&#39;</code> as <code>nums[0] == 2</code></li>
		<li><code>&#39;z&#39;</code> becomes <code>&#39;ab&#39;</code> as <code>nums[25] == 2</code></li>
		<li><code>&#39;b&#39;</code> becomes <code>&#39;cd&#39;</code> as <code>nums[1] == 2</code></li>
		<li><code>&#39;k&#39;</code> becomes <code>&#39;lm&#39;</code> as <code>nums[10] == 2</code></li>
		<li>String after the first transformation: <code>&quot;bcabcdlm&quot;</code></li>
	</ul>
	</li>
	<li>
	<p><strong>Final Length of the string:</strong> The string is <code>&quot;bcabcdlm&quot;</code>, which has 8 characters.</p>
	</li>
</ul>
</div>

<p>&nbsp;</p>
<p><strong>Constraints:</strong></p>

<ul>
	<li><code>1 &lt;= s.length &lt;= 10<sup>5</sup></code></li>
	<li><code>s</code> consists only of lowercase English letters.</li>
	<li><code>1 &lt;= t &lt;= 10<sup>9</sup></code></li>
	<li><code><font face="monospace">nums.length == 26</font></code></li>
	<li><code><font face="monospace">1 &lt;= nums[i] &lt;= 25</font></code></li>
</ul>
]]></content:encoded>
      <guid isPermaLink="false">total-characters-in-string-after-transformations-ii</guid>
      <pubDate>Wed, 14 May 2025 00:00:00 +0000</pubDate>
    </item>
  </channel>
</rss>
